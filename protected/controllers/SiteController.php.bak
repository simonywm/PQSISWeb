<?php

class SiteController extends Controller
{
    public function filters()
    {
        return array(
            array(
                'application.filters.AccessControlFilter - AjaxLogin, Landing',
            ),
        );
    } 
    
    /**
	 * This is the default 'index' action that is invoked
	 * when an action is not explicitly requested by users.
	 */
	public function actionIndex()
	{
	    Yii::app()->runController('FirstForm/Landing');
	}
	
	public function actionLanding()
	{
	    $this->frame = "//layouts/main";
	    $this->render("index");
	}
	
	public function actionAjaxLogin()
	{
	    // get the user from db
	    $username = isset($_POST['loginId']) ? $_POST['loginId'] : '';
	    $password = isset($_POST['password']) ? $_POST['password'] : '';
	    
		
		if (empty($username))
	    {
	        $retJson['status']='FAIL';
	        $retJson['retMessage']="Username could not be empty";
	    }
	    else
	    {
			$userModel = Yii::app()->formDao->getUser($username);
	        
	            
	        if (empty($userModel)){
	            $retJson['status']='FAIL';
	            $retJson['retMessage']="User not found";
	        }
	        else
	        {
				if($password!=$userModel['password']){
					$retJson['status']='FAIL';
					$retJson['retMessage']="Password is not correct";
				}
				else{
					$tokenHash = Yii::app()->commonUtil->getGeneratedId();
					
			        $userModel["username"] = $username;
			        $userModel['token_hash'] = $tokenHash;
			        Yii::app()->session['tblUserDo'] = $userModel;
					
					$retJson = array();
					$retJson['status']='OK';
				}
			}
		}
		echo json_encode($retJson);
	  //  if (strtoupper($username) != "ADMIN")
    	//    $userModel = TblUser::model()->findByAttributes(array('user_name'=>$username));
	    
	  /*  $retJson = array();
	    
	    if (!empty($userModel))
	    {
	        $currentTime = strtotime(date("Y-m-d H:i:s"));
	        $accActivateTime = strtotime($userModel['acc_activate_time']);
	        
	        if (empty($accActivateTime))
	        {
	            // expired
	            $retJson['status']='FAIL';
	            $retJson['retMessage']="Please refresh the page and re-login again.";
	        }
	        else if ($accActivateTime + 60*Yii::app()->params['accExpiryTime'] < $currentTime)
	        {
	            // expired
	            $retJson['status']='FAIL';
	            $retJson['retMessage']="Account is already expired. Please refresh the page to re-login again";
	        }
	        else
	        {
	            // check if the acc already used
	            if ($userModel['login_count'] >= Yii::app()->params['maxLoginCount'])
	            {
	                $retJson['status']="FAIL";
	                $retJson['retMessage']="Account is already locked";
	            }
	            else 
	            {
	                // check password
	                $passwordCheck = false;
	                
	                if ($userModel['password_index'] == 1 && $userModel['password1'] == $password)
	                    $passwordCheck = true;
	                else if ($userModel['password_index'] == 2 && $userModel['password2'] == $password)
	                    $passwordCheck = true;
                    else if ($userModel['password_index'] == 3 && $userModel['password3'] == $password)
	                    $passwordCheck = true;
	                        
	                if ($passwordCheck)
	                {
	                    // update the login count and token hash
	                    $tokenHash = Yii::app()->commonUtil->getGeneratedId();
	                    $loginCount = $userModel['login_count'] + 1;
	                    $sysUserId = $userModel['sys_user_id'];
	                    
	                    $sql = "update tbl_user set login_count = :loginCount, token_hash = :tokenHash where sys_user_id = :sysUserId";
	                    
	                    $command = Yii::app()->db->createCommand($sql);
	                    $command->bindParam(':loginCount',$loginCount, PDO::PARAM_INT);
	                    $command->bindParam(':tokenHash',$tokenHash, PDO::PARAM_STR);
	                    $command->bindParam(':sysUserId', $sysUserId, PDO::PARAM_INT);
	                    
	                    $command->execute();
	                    
	                    // get the page sys id
	                    $pageModel = TblPage::model()->findByAttributes(array('page_name'=>'Login'));
	                    $sysPageId = $pageModel['sys_page_id'];
	                    
	                    // save the login to user history table
	                    $sql = "
					insert into tbl_user_history (
                        sys_user_history_id,
                        sys_user_id,
                        sys_page_id,
                        start_time,
                        end_time,
                        token_hash,
                        cre_dt,
                        creator,
                        last_upd_dt,
                        last_upd_user
                    ) values (
                        :sysUserHistoryId,
                        :sysUserId,
                        (select sys_page_id from tbl_page where page_name = 'Login'),
                        sysdate(),
                        sysdate(),
                        :tokenHash,
                        sysdate(),
                        'SYSTEM',
                        sysdate(),
                        'SYSTEM'
                    )";
	                    
	                    $sysUserHistoryId = Yii::app()->commonUtil->getGeneratedId();
	                    
	                    $command = Yii::app()->db->createCommand($sql);
	                    $command->bindParam(':sysUserHistoryId',$sysUserHistoryId, PDO::PARAM_INT);
	                    $command->bindParam(':sysUserId',$sysUserId, PDO::PARAM_STR);
	                    $command->bindParam(':tokenHash', $tokenHash, PDO::PARAM_STR);
	                    
	                    $command->execute();
	                    
	                    // save the user model to session
	                    $userModel['token_hash'] = $tokenHash;
	                    Yii::app()->session['tblUserDo'] = $userModel;
	                    
	                    $retJson['status']='OK';
	                }
	                else
	                {
	                    // username or password not correct
	                    $retJson['status']='FAIL';
	                    $retJson['retMessage']="Username/Password incorrect";
	                }
	            }
	        }
	    }
	    else
	    {
	        // username or password not correct
	        $retJson['status']='FAIL';
	        $retJson['retMessage']="Username/Password incorrect";
	    }

		echo json_encode($retJson);
		*/
	}

	public function actionLogout()
	{
	    session_unset();
	    session_destroy();
	    
	    $this->frame = "//layouts/main";
	    $this->render("index");
	    
	}
	
	public function actionAjaxActivateAcc()
	{
	    $retJson = array();
	    
	    // get the user from db
	    $userName = isset($_POST['username']) ? $_POST['username'] : '';
	    
	    if (empty($userName))
	    {
	        $retJson['status']='FAIL';
	        $retJson['retMessage']="Username could not be empty";
	    }
	    else
	    {
	        $userModel = TblUser::model()->findByAttributes(array('user_name'=>$userName));
	    
	        if (strtoupper($userName) != "ADMIN")
	            $userModel = TblUser::model()->findByAttributes(array('user_name'=>$userName));
	            
	        if (empty($userModel)){
	            $retJson['status']='FAIL';
	            $retJson['retMessage']="User not found";
	        }
	        else
	        {
	            $currentTime = strtotime(date("Y-m-d H:i:s"));
	            $accActivateTime = strtotime($userModel['acc_activate_time']);
	            
	            // check if the acc already used
	            if ($userModel['login_count'] >= Yii::app()->params['maxLoginCount'])
	            {
	                $retJson['status']="FAIL";
	                $retJson['retMessage']="Account is already locked";
	            }
	            else
	            {
	                // activate account
	                if (empty($accActivateTime) || ($accActivateTime + 60*Yii::app()->params['accExpiryTime'] < $currentTime && $userModel["password_index"] < 3))
	                {
	                    // activate account
	                    $sql = "update tbl_user set acc_activate_time = now(), password_index = :passwordInd where sys_user_id = :sysUserId;";
	                    $sysUserId = $userModel["sys_user_id"];
	                    $passwordInd = $userModel["password_index"] + 1;
	                    
	                    $command = Yii::app()->db->createCommand($sql);
	                    $command->bindParam(':passwordInd', $passwordInd, PDO::PARAM_INT);
	                    $command->bindParam(':sysUserId',$sysUserId, PDO::PARAM_INT);
	                    
	                    $command->execute();
	                    $retJson['status']='ACT';
	                    
	                    // send SMS to user
	                    if (ctype_digit($userName))
	                    {
	                        $password = $userModel['password1'];
	                        
	                        if ($passwordInd == 2)
	                            $password = $userModel['password2'];
	                            else if ($passwordInd == 3)
	                            $password = $userModel['password3'];
	                        
	                        $sendContent = "Your account is activated. You have 5 minutes to login the web site. Please use the following information to Login: Username:".$userModel['user_name'].", Password:".$password;
	                        $sendResult = Yii::app()->SMSUtil->sendSms($userName, $sendContent);
	                        
	                        if ($sendResult == "ERROR")
	                        {
	                            $retJson['status']='FAIL';
	                            $retJson['retMessage']="Error in sending SMS";
	                        }
	                    }
	                }
	                else if (!empty($accActivateTime) && $accActivateTime + 60*Yii::app()->params['accExpiryTime'] > $currentTime)
	                {
	                    // just go input password
	                    $retJson['status']='OK';
	                }
	                else
	                {
	                    $retJson['status']='FAIL';
	                    $retJson['retMessage']="Please contact admin to reset password.";
	                }
	            }
	        }
	    }
	    
	    echo json_encode($retJson);
	}
	
	// https://mobiforge.com/design-development/content-delivery-mobile-devices
	function rangeDownload($file)
	{
	    $fp = @fopen($file, 'rb');
	    
	    $size   = filesize($file); // File size
	    $length = $size;           // Content length
	    $start  = 0;               // Start byte
	    $end    = $size - 1;       // End byte
	    // Now that we've gotten so far without errors we send the accept range header
	    /* At the moment we only support single ranges.
	     * Multiple ranges requires some more work to ensure it works correctly
	     * and comply with the spesifications: http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.2
	     *
	     * Multirange support annouces itself with:
	     * header('Accept-Ranges: bytes');
	     *
	     * Multirange content must be sent with multipart/byteranges mediatype,
	     * (mediatype = mimetype)
	     * as well as a boundry header to indicate the various chunks of data.
	     */
	    header("Accept-Ranges: 0-$length");
	    // header('Accept-Ranges: bytes');
	    // multipart/byteranges
	    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.2
	    if (isset($_SERVER['HTTP_RANGE'])) {
	        
	        $c_start = $start;
	        $c_end   = $end;
	        // Extract the range string
	        list(, $range) = explode('=', $_SERVER['HTTP_RANGE'], 2);
	        // Make sure the client hasn't sent us a multibyte range
	        if (strpos($range, ',') !== false) {
	            
	            // (?) Shoud this be issued here, or should the first
	            // range be used? Or should the header be ignored and
	            // we output the whole content?
	            header('HTTP/1.1 416 Requested Range Not Satisfiable');
	            header("Content-Range: bytes $start-$end/$size");
	            // (?) Echo some info to the client?
	            exit;
	        }
	        // If the range starts with an '-' we start from the beginning
	        // If not, we forward the file pointer
	        // And make sure to get the end byte if spesified
	        if ($range == '-') {
	            
	            // The n-number of the last bytes is requested
	            $c_start = $size - substr($range, 1);
	        }
	        else {
	            
	            $range  = explode('-', $range);
	            $c_start = $range[0];
	            $c_end   = (isset($range[1]) && is_numeric($range[1])) ? $range[1] : $size;
	        }
	        /* Check the range and make sure it's treated according to the specs.
	         * http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
	         */
	        // End bytes can not be larger than $end.
	        $c_end = ($c_end > $end) ? $end : $c_end;
	        // Validate the requested range and return an error if it's not correct.
	        if ($c_start > $c_end || $c_start > $size - 1 || $c_end >= $size) {
	            
	            header('HTTP/1.1 416 Requested Range Not Satisfiable');
	            header("Content-Range: bytes $start-$end/$size");
	            // (?) Echo some info to the client?
	            exit;
	        }
	        $start  = $c_start;
	        $end    = $c_end;
	        $length = $end - $start + 1; // Calculate new content length
	        fseek($fp, $start);
	        header('HTTP/1.1 206 Partial Content');
	    }
	    // Notify the client the byte range we'll be outputting
	    header("Content-Range: bytes $start-$end/$size");
	    header("Content-Length: $length");
	    
	    // Start buffered download
	    $buffer = 1024 * 8;
	    while(!feof($fp) && ($p = ftell($fp)) <= $end) {
	        
	        if ($p + $buffer > $end) {
	            
	            // In case we're only outputtin a chunk, make sure we don't
	            // read past the length
	            $buffer = $end - $p + 1;
	        }
	        set_time_limit(0); // Reset time limit for big files
	        echo fread($fp, $buffer);
	        flush(); // Free up memory. Otherwise large files will trigger PHP's memory limit.
	    }
	    
	    fclose($fp);
	}
	
	public function actionGetVideo()
	{
	    $video = Yii::getPathOfAlias('application').DIRECTORY_SEPARATOR."views".DIRECTORY_SEPARATOR."site".DIRECTORY_SEPARATOR."video".DIRECTORY_SEPARATOR;
	    
	    $video = $video."video1120.mp4";
	    
        header('Content-Type: video/mp4');
	    header('Accept-Ranges: bytes');
	    
	    try {
	        if (isset($_SERVER['HTTP_RANGE']))  { // do it for any device that supports byte-ranges not only iPhone
    	        $this->rangeDownload($video);
	        }
	        else {
	            header("Content-Length: ".filesize($video));
	            readfile($video);
	        }
	    } catch  (Exception $e) {
	        echo $e;
	    }
	    
	}
	
	/**
	 * This is the action to handle external exceptions.
	 */
	public function actionError()
	{
		if($error=Yii::app()->errorHandler->error)
		{
			if(Yii::app()->request->isAjaxRequest)
				echo $error['message'];
			else
				$this->render('error', $error);
		}
	}
}